version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: investment_app_postgres
    environment:
      POSTGRES_DB: investment_app
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/scripts:/docker-entrypoint-initdb.d
    networks:
      - investment_app_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: investment_app_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - investment_app_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: ../docker/Dockerfile.backend
    container_name: investment_app_backend
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/investment_app
      - REDIS_URL=redis://redis:6379
      - CORS_ORIGINS=http://localhost:3000
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app
      - ./UserModule:/app/modules/user
      - ./PortfolioModule:/app/modules/portfolio
      - ./DcfModule:/app/modules/dcf
      - ./DataModule:/app/modules/data
      - ./ReportModule:/app/modules/reports
    networks:
      - investment_app_network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/Dockerfile.frontend
    container_name: investment_app_frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_APP_NAME=Investment App
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - investment_app_network
    command: npm run dev

  # Nginx (Production)
  nginx:
    image: nginx:alpine
    container_name: investment_app_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - investment_app_network
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  investment_app_network:
    driver: bridge